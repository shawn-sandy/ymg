---
import Layout from "#layouts/Layout.astro";
import { CONTACT_INFO } from "#utils/site-config.js";
import Alert from '#components/astro/Alert.astro';

let errors = {};
if (Astro.request.method === 'POST') {
  // ... existing server-side validation ...
}
---

<Layout
  pageTitle="Contact"
  pageDescription="We are here to answer your questions, welcome your feedback, and help you get involved"
>
  <h3>Reach Out, Say Hello Neighbor!</h3>
  <hr />
  <section>
    <p>
      We’re here to answer your questions, welcome your feedback, and help you
      get involved. Use the form below or contact us directly at [insert email
      address] or [insert phone number].
    </p>
    <hr />
 
    <!-- 
    <h3>Stay Connected</h3>
    <p>
      Follow us on social media [insert social media links] to stay updated on
      our latest projects and events.
    </p>
    -->
  </section> 

<div id="error-alert" style="display: none;">
  <Alert type="error">
    <h6>Please correct the following errors</h6>
    <ul id="error-list" data-list="unstyled"></ul>
  </Alert>
</div>
    <form
      action={CONTACT_INFO.url}
      method="post"
      data-netlify={CONTACT_INFO.isNetlify}
      id="contact-us"
      name="contact-us"
      data-netlify-honeypot="bot-field"
      novalidate
      aria-label="Contact us"
    >
      {
        CONTACT_INFO?.isNetlify && (
          <p class="hidden">
            <label>
              Don’t fill this out if you’re human: <input name="bot-field" />
            </label>
          </p>
        )
      }

      <div>
        <label for="name">Your Full Name</label>
        <input type="text" id="name" name="name" required />
        <p class="error-msg">Please enter your full name</p>
      </div>
      <div>
        <label for="email">Your current email address</label>
        <input type="email" id="email" name="email" required />
        <p class="error-msg">We need your email to get back to you</p>
      </div>
      <div>
        <label for="phone">Your full number</label>
        <input type="tel" id="phone" name="phone" />
        <p class="error-msg">Your phone number does not appear to be valid</p>
      </div>
      <div>
        <label for="subject">The subject of your message</label>
        <input type="text" id="subject" name="subject" required />
        <p class="error-msg">We need a subject to help us respond</p>
      </div>
      <div>
        <label for="message">Please enter your message here</label>
        <textarea id="message" name="message" rows="7" required></textarea>
        <p class="error-msg">Please enter your message here</p>
      </div>
      <button type="submit" data-btn="pill"><b>Send Message</b></button>
    </form>
  </section>
</Layout >

<script>
  const form = document.querySelector("#contact-us") as HTMLFormElement;
  const errorAlert = document.querySelector("#error-alert") as HTMLDivElement;
  const errorList = document.querySelector("#error-list") as HTMLUListElement;

  const errorMessages = {
    name: "Please enter your full name",
    email: "We need your email to get back to you",
    phone: "Your phone number does not appear to be valid",
    subject: "We need a subject to help us respond",
    message: "Please enter your message here"
  };

  if (form) {
    form.addEventListener("submit", (e) => {
      e.preventDefault();
      validateForm();
    });
    
    function validateForm() {
      const formData = new FormData(form);
      let isValid = true;
      let errors = {};

      for (const [name, value] of formData.entries()) {
        const field = form.elements.namedItem(name) as HTMLInputElement | HTMLTextAreaElement;
        let fieldValid = true;
        let errorMessage = "";

        if (field.required && !value) {
          fieldValid = false;
          errorMessage = errorMessages[name] || "This field is required";
        } else if (name === "email" && value && !isValidEmail(value.toString())) {
          fieldValid = false;
          errorMessage = "Please enter a valid email address";
        } else if (name === "phone" && value && !isValidPhone(value.toString())) {
          fieldValid = false;
          errorMessage = errorMessages.phone;
        }

        setFieldValidity(field, fieldValid, errorMessage);
        if (!fieldValid) {
          isValid = false;
          errors[name] = errorMessage;
        }
      }

      if (isValid) {
        errorAlert.style.display = "none";
        form.submit();
      } else {
        displayErrors(errors);
      }
    }

    function isValidEmail(email: string) {
      return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    }

    function isValidPhone(phone: string) {
      return /^[\d\s-()]{7,}$/.test(phone);
    }

    function setFieldValidity(
      field: HTMLElement,
      isValid: boolean,
      errorMessage: string
    ) {
      const errorElement = field.nextElementSibling as HTMLElement;
      if (isValid) {
        field.classList.remove("invalid");
        errorElement?.classList.add("error-msg");
      } else {
        field.classList.add("invalid");
        errorElement?.classList.remove("error-msg");
        errorElement.textContent = errorMessage;
      }
    }

    function displayErrors(errors: Record<string, string>) {
      errorList.innerHTML = "";
      for (const [field, message] of Object.entries(errors)) {
        const li = document.createElement("li");
        const a = document.createElement("a");
        a.href = `#${field}`;
        a.textContent = message;
        li.appendChild(a);
        errorList.appendChild(li);
      }
      errorAlert.style.display = "block";
    }
  }
</script>
